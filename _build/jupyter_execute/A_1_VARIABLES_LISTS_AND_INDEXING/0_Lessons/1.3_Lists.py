#!/usr/bin/env python
# coding: utf-8

# # 1.3 Lists

# ## How to create lists
# 
# - Use empty brackets `[ ]` to initialize an empty list
# - Then, fill the brackets with variables or strings separated by commas
# ____

# ***Watch this video from 9:10 to 12:22***

# In[1]:


# To load the video, execute this cell by pressing shift + enter

from IPython.display import YouTubeVideo
from datetime import timedelta
start=int(timedelta(hours=0, minutes=9, seconds=10).total_seconds())
end=int(timedelta(hours=0, minutes=12, seconds=22).total_seconds())

YouTubeVideo("4XIllJVnT4Y",start=start,end=end,width=640,height=360)


# ***The following is a transcript of the video.***

# > ğŸ’¡ ***Remember:*** In the previous notebook you created variables called `wine`, `tequila`, and `beer`. Create the variables again in the cell below to complete this lesson.

# In[2]:


# Create the variables wine, tequila, and beer

wine = "Vitis_vinifera"
tequila = "Agave_tequilana"
beer = "Hordeum_vulgare"


# Previously, we made all those variables because now we'reÂ going to create something called lists. ListsÂ are just like they sound. They are a list of dataÂ types. The data types can be strings, they canÂ be numbers, they can be integers, they can beÂ floats, they can even be lists and we'll talkÂ soon about creating a list of lists.Â You can put anything in your list that you want.Â Creating lists is very easy. You just use emptyÂ brackets. These brackets will not be touchingÂ another word like when you index, This willÂ initialize an empty list. Then we just fill theÂ brackets with variables or strings and they'reÂ separated by commas.
# 
# Let's create an emptyÂ list. We'll create a variable name `angiosperms`, which is the name for the flowering plants. We're going to set it equal to an empty list.Â And all an empty list is is just an empty set ofÂ brackets. We hit shift + enter and we will haveÂ created our new list.

# In[3]:


# Let's create an empty list called angiosperms, or the flowering plants

angiosperms = [ ]


# It's very convenientÂ to know we can create all these variable types,Â they're just a collection of letters. They are just names, and sometimes you might be confused "whatÂ 
# do I have?": is it a string, is it a list,Â is it a number? Let's learn about our secondÂ 
# function in python, it's called `type()`. For theÂ function `type()` we have a set of parentheses andÂ we put an input into it, a variable of some sort,Â and `type()` will return back to us what type ofÂ variable it is. So we just created an empty listÂ for our variable `angiosperms` and using `type()` we see indeedÂ that's what we have, it is a list.Â Â 

# In[4]:


# We can always check what type of variable we have with the function type()
# Let's check if angiosperms is a list

type(angiosperms)


# You can test this further. ForÂ example `wine`, if you remember wasÂ a string, it's "Vitis_vinifera", it's just aÂ collection of characters and it's not a list. So `type()` will tell you whatÂ sort of data type that you're working with.Â Â 

# In[5]:


# In contrast to the list angiosperms, wine is a string

type(wine)


# If we look at the contents of ourÂ angiosperm list it should be empty,Â right?, we haven't put anything into itÂ and indeed we just get empty bracketsÂ back.

# In[6]:


# If we look at the contents of our list angiosperms,
# it should be empty

angiosperms


# But let's fill it up now. Filling up a listÂ is really easy. All you do is you put in variablesÂ separated by commas. So in our list angiospermsÂ we're going to put in wine, tequila and beer.Â Â 

# In[7]:


# Let's fill up our list angiosperms!
# We simply type in our variables, separated by commas

angiosperms = [wine, tequila, beer]


# We execute that cell. And now if we look at ourÂ variables in our list `angiosperms`, because we put `wine`, `tequila` and `beer` in it, we get back the values for those variables,Â which are "Vitis_vinifera", "Agave_tequilana",Â and "Hordeum_vulgare". So that's how you createÂ a list, a set of empty brackets. You put inÂ variables, numbers, strings, other lists,Â and as you'll see soon, anything you want.Â 

# In[8]:


# Now, when we look at the contents of angiosperms
# we should get back the variables we input

angiosperms


# Another convenient function is something calledÂ `len()`, for length. Length will give you back theÂ length of a list, how many elements are inÂ it. For example, we know that our angiospermÂ list has three elements in it. So if we putÂ the list in the function length we get backÂ three.

# In[9]:


# Another convenient function is len()
# len() gives back the length of a list, how many elements it has
# For example, our list angiosperms has 3 elements

len(angiosperms)

