#!/usr/bin/env python
# coding: utf-8

# # Activity 3: C√≥mo construir un girasol üåª 

# ___

# En esta actividad, aprenderemos a codificar el intrincado y hermoso conjunto de floretes en una cabeza de girasol, exploraremos la como la disposici√≥n de los floretes tiende al √°ngulo dorado y crearemos animaciones de un girasol en crecimiento.
# 
# Como tarea previa a esta actividad, debemos leer el ["Cap√≠tulo 4 - Phyllotaxis"](http://algorithmicbotany.org/papers/abop/abop-ch4.pdf) de [*The Algorithmic Beauty of Plants*](http://algorithmicbotany.org/papers/#abop). La inspiraci√≥n y la teor√≠a detr√°s de la codificaci√≥n que har√°s hoy viene de ah√≠. 
# 
# Las f√≥rmulas tambi√©n provienen del cap√≠tulo, pero √©stas a su vez derivan del trabajo cl√°sico de Vogel, "A better way to construct the sunflower head". Ambos trabajos forman la base de la actividad de hoy. Echa un vistazo al texto si tienes la oportunidad (no es estrictamente necesario) para familiarizarte con algunas de las matem√°ticas que usaremos en la actividad de hoy.
# 
# > **Referencias:**
# >
# > P. Prusinkiewicz and A. Lindenmayer. [The algorithmic beauty of plants](http://algorithmicbotany.org/papers/#abop). Springer-Verlag, Berlin, Heidelberg, 1990. ISBN:0-387-97297-8
# >
# > H. Vogel. [A better way to construct the sunflower head](https://doi.org/10.1016/0025-5564(79)90080-4). *Mathematical Biosciences*, 44:179‚Äì189, 1979.

# ___
# ## La f√≥rmula de un girasol
# 
# Del cap√≠tulo de *The Algorithmic Beauty of Plants* que le√≠mos, aprendimos que Vogel propuso las siguientes f√≥rmulas para calcular el √°ngulo y el radio de cada flor en la cabeza de un girasol:
# 
# ```python
# theta = n * phi
# r = sqrt(n)
# ```
# 
# Donde `n` es el n√∫mero ordenado de cada florete en una cabeza de girasol, `theta` es el √°ngulo de la flor, `phi` es el √°ngulo dorado y `r` es el radio, la distancia entre la flor y el centro del girasol. Debemos pensar que cada florete secuencial tiene un "giro" de `phi` y que tiene un radio m√°s largo que el anterior, siguiendo una funci√≥n de ra√≠z cuadrada.
# 
# Tambi√©n recuerdemos de nuevo de trigonometr√≠a que en un tri√°ngulo rect√°ngulo, `cos` y` sin` son los lados adyacentes y opuestos divididos por la hipotenusa respectivamente. En el contexto de un plano cartesiano radial centrado en (0,0), para recuperar las coordenadas `x` e` y` usamos las siguientes ecuaciones:
# 
# ```python
# x = r * cos(theta)
# y = r * sin(theta)
# ```
# 
# Finalmente, trabajaremos en radianes, no en grados. Recordemos tambi√©n de la trigonometr√≠a que para convertir grados en radianes, multiplicamos grados por $\displaystyle\frac{\pi}{180}$.

# ___
# ## ¬°Construye un girasol!
# 
# Usando las ecuaciones anteriores, ¬°construye un girasol!
# 
# Pero primero, dado que usaremos mucho el √°ngulo dorado, hagamos que sea una variable. En la celda de abajo, se proporciona el √°ngulo dorado en grados. Crea una nueva variable llamada `phi` que sea el √°ngulo dorado en radianes.
# 
# Ser√≠a conveniente tener $\pi$. La celda de abajo importa el m√≥dulo `math`, ¬°que probablemente necesitaremos a menudo! Para recuperar el valor de $\pi$, simplemente escribe `math.pi`. Tambi√©n necesitaremos `math` para las funciones `math.sqrt()`, `math.cos()` y `math.sin()` en esta lecci√≥n.

# In[1]:


import math  

# From the online encyclopedia of integer sequences: 
# https://oeis.org/A096627

golden_angle = 137.5077640500378546463487396283702776206886952699253696312384958261062333851951

# Calcula el √°ngulo dorado en radianes
# Llama a la variable phi


# A continuaci√≥n, escribe un loop `for` para calcular las coordenadas  `x` e `y` de cada flor.
# 
# **Haz lo siguiente:**
# 
# * Crea dos listas para las coordenadas fuera del ciclo: una lista para los valores `x` y una lista para los valores` y`
# * El ciclo `for` debe iterarse 1000 veces, calculando los valores de las coordenadas` x` e `y` para 1000 floretes
# * Dentro del loop, para cada florete, calcula:
#    * Radio
#    * Theta
#    * valor de la coordenada x
#    * valor de la coordenada y
# * Agrega los valores de las coordenadas `x` e` y` a sus respectivas listas

# In[2]:


# Escribe tu respuesta aqu√≠



# Luego, grafica los resultados con `matplotlib.`
# 
# * Presta atenci√≥n al tama√±o de los puntos, que no se superpongan demasiado pero que tampoco sean demasiado peque√±os.
# * Elige un color apropiado.
# * Ajusta la transparencia de forma adecuada.
# * Considera igualar la escala de los ejes x e y
# * Remueve los ejes
# * Siempre cuida la est√©tica, ***especialmente*** al trazar girasoles.

# In[3]:


# Siempre se debe importar matplotlib
# y usar la opcion inline

import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

# Realiza tu gr√°fico aqu√≠


# ___
# ## ¬°La importancia del √°ngulo!

# Del cap√≠tulo de *The Algorithmic Beauty of Plants* sabemos que la acumulaci√≥n de floretes en un girasol es extremadamente sensible al valor exacto del √°ngulo dorado. Un poco m√°s o un poco menos y la disposici√≥n bellamente espaciada a simple vista se destruye. Esto se debe a las propiedades matem√°ticas especiales del √°ngulo dorado.
# 
# En este ejercicio, tomaremos las flores de girasol que acabamos de crear usando su loop `for` y crearemos una animaci√≥n, donde el valor del √°ngulo dorado se desv√≠a $\pm1$ grados en 100 pasos. Usando esta animaci√≥n, observaremos la sensibilidad del empaque de floretes en un girasol al √°ngulo dorado, y c√≥mo esta sensibilidad var√≠a m√°s cerca y m√°s lejos del centro.
# 
# ¬°Nuestra estrategia ser√° crear un loop dentro del loop! La l√≥gica es la siguiente: ya hemos creado un bucle que calcular√° todas las coordenadas `x` e` y` en un girasol. ¬°Pon ese loop en otro loop! El loop exterior iterar√° sobre las desviaciones del √°ngulo dorado. Entonces, el flujo se ver√° as√≠:
# 
# 1. El loop exterior crea un nuevo valor de √°ngulo,
# 2. El loop interno calcula todos los valores de las coordenadas `x` e` y` para el nuevo valor del √°ngulo,
# 3. Salimos del loop interior, y estamos de vuelta en el loop exterior,
# 4. El c√≥digo anterior para trazar un girasol traza los floretes para el √°ngulo actual,
# 5. ¬°El loop exterior se repite con un nuevo valor de √°ngulo y forma un nuevo cuadro de la animaci√≥n!
# 
# Solo una cosa m√°s. 
# 
# Estaremos iterando en 100 pasos desde -1 a +1 grados del √°ngulo dorado. ¬øC√≥mo se especifica un n√∫mero determinado de pasos entre dos valores? Una funci√≥n para hacer esto es `linspace()`, del m√≥dulo `numpy`. `linspace()` toma un valor de inicio (inclusivo), un valor de parada (inclusivo) y un n√∫mero de pasos para iterar incrementalmente sobre el intervalo. ¬°Usemos esto en el loop exterior para ajustar minuciosamente el valor del √°ngulo $\pm1$ grados del √°ngulo dorado!
# 
# En la celda a continuaci√≥n, se proporciona un pseudoc√≥digo para guiar la construcci√≥n del loop dentro del loop. Recuerda usar el c√≥digo anterior (con algunas modificaciones) para calcular los valores de las coordenadas `x` e` y` y para trazar el girasol.
# 
# Este ejercicio est√° destinado a que dediques tiempo a pensar en c√≥mo funcionan los loops complejos y en c√≥mo modificar y ajustar el c√≥digo para diferentes prop√≥sitos. 
# 
# Si tienes √©xito, ¬°crear√°s una hermosa animaci√≥n de girasol!
# 
# ¬°Sigue el pseudoc√≥digo y completa las partes que faltan!

# In[4]:


# Importes para la animaci√≥n
from IPython.display import display, clear_output 
import time  

# Importa numpy para usar linspace
import numpy as np

# Para la animaci√≥n, necesitamos un lienzo
fig = plt.figure(figsize=(10,10)) 

# Usamos linspace() para cream incrementos de -1 a +1
for i in np.linspace(-1, 1, 100):
    
    # Crea una nueva variable "new_angle"
    # "new_angle" ser√° golden_angle + i
    # Recuerda que el nuevo √°ngulo debe ser en radianes!
    
    
    
    # Aqu√≠ podemos reciclar nuestro loop anterior para
    # calcular las coordenadas x e y
    # theta debe ser calculado con nuestro √°ngulo nuevo
    # Recuerda que python toma en cuenta la sangr√≠a
    # Doble sangr√≠a indicar√° un loop dentro de un loop
    # Mant√©n las listas de coordenadas x e y fuera del loop interno
    # pero dentro del loop externo
    # Como antes, calcularemos la posici√≥n de 1000 floretes
    
    # Recicla tu loop anterior
    
    
    
    
    
    
    
    
    # Hemos concluido el loop interno
    # Es hora de movernos al loop externo
    
    
    # Usa tu c√≥digo para graficar el girasol
    
    

    # Este c√≥digo crea la animaci√≥n
    time.sleep(0.1) 
    clear_output(wait=True)
    display(fig)
    fig.clear()


# ___
# ## ¬°Pero los girasoles crecen!
# 
# Todav√≠a no hemos terminado. ¬°En el mundo real los girasoles tambi√©n crecen! Los floretes surgen de un meristemo (una poblaci√≥n de c√©lulas madre) en el centro del girasol. En la periferia del meristemo apical del brote en el centro del girasol, se determina que las c√©lulas se convertir√°n en una flor. Llamamos "pluripotencia" a la capacidad de las c√©lulas, como los meristemos, para producir diferentes tipos de tejidos. Decimos que las c√©lulas est√°n "determinadas" o "predestinadas" a convertirse en un tipo particular de tejido a medida que pierden pluripotencia. Las c√©lulas "diferenciadas" ya se han convertido en un tejido particular. Despu√©s de que una flor se ha diferenciado, se aleja del centro del girasol.
# 
# En las gr√°ficas anteriores, los floretes de la periferia fueron los primeros en surgir y fueron "empujados" desde el centro por todos los dem√°s floretes que surgieron posteriormente. ¬°Creemos una animaci√≥n en la que veamos florecer floretes en el centro y moverse hacia afuera!
# 
# Vas a:
# 
# 1. Crear listas `thetas` y` radii` como antes. Simplemente usaremos el c√≥digo previo para calcular las thetas y los radios.
# 
# 1. Una vez que nace, una flor ***siempre*** mantiene la misma theta. Pero el radio se hace cada vez m√°s amplio.
# 
# 1. Nuestro primer loop crear√° listas de theta y radios que aumentan de longitud con cada iteraci√≥n. Comenzaremos con un florete, luego dos, y as√≠ sucesivamente, y con cada florete adicional, los radios de los primeros floretes ser√°n cada vez m√°s amplios. Comenzaremos sin floretes y cultivaremos nuestro girasol, agregando m√°s y m√°s. Este loop toma un miembro m√°s de las listas `thetas` y `radii` con cada iteraci√≥n.
# 
# 1. Sin embargo, hay un problema. Cada vez que agregamos m√°s elementos a nuestras listas, los "thethas" y "radios" m√°s antiguos (asociados a flores √∫nicos) se hallan **al inicio** de las listas `thetas` y `radii`. ¬°Los "radios" m√°s antiguos son los radios m√°s cortos, pero los "thetas" m√°s antiguos deben corresponder a radios amplios!
# 
# 1. Usaremos la funci√≥n `.reverse ()`, que invierte el orden de los elementos de una lista. Lo que esto har√° es asegurar que los "thetas" m√°s antiguos de la lista `thetas` correspondan a los radios m√°s amplios de la lista `radii`.
# 
# 1. Recapitulando: agregamos una flor m√°s con cada iteraci√≥n. Pero el primer florete siempre tendr√≠a el radio m√°s corto, a menos que invirti√©ramos la lista de radios. Al invertir la lista de radios, el primer florete tendr√° un radio creciente.
# 
# Sigue el razonamiento anterior y aseg√∫rese de comprenderlo. En las celdas siguientes se proporciona un pseudoc√≥digo con comentarios. Usando este esqueleto, completa el resto del c√≥digo. El c√≥digo consta de dos partes:
# 
# 1. Primero, usando un loop `for`, crea dos listas: `thetas` y `radii`. Estas listas deben contener **750** valores theta y radio para floretes.
# 
# 2. Con el pseudoc√≥digo proporcionado, crea una animaci√≥n de un girasol en crecimiento.

# In[5]:


# Crea las listas vac√≠as thetas y radii
# Con un loop, llena las listas con los valores correspondietes a 750 floretes
# Puedes usar c√≥digo previo

# Escribe tu respuesta



# In[6]:


# Completa el c√≥digo siguiente para crear una animaci√≥n de c√≥mo crecen los floretes en un girasol
# Presta atenci√≥n a ambos loops y cual es el prop√≥sito de cada uno
# Presta atenci√≥n a los √≠ndices de cada lista
# Observa como se usa la funci√≥n .reverse()
# Observa como el c√≥digo crea una animaci√≥n cuadro por cuadro del crecimiento de un girasol

# Escribe tu respuesta

# Importes para animar el resultado
from IPython.display import display, clear_output
import time  

# Para la animaci√≥n, debemos de establecer un canvas/figure
fig = plt.figure()

for i in range(len(radii)):

    xlist = []
    ylist = []
    
    # Aqu√≠ seleccionamos los thetas del momento
    current_thetas = thetPs[0:(i+1)]
    
    # Aqu√≠ seleccionamos los radios correspondientes a los thetas anteriores
    # Cada vez que iteramos el loop, esta lista va de menor a mayor
    
    current_radii = radii[0:(i+1)]
    # Por ello, debemos de revertir el orden
    # De ese modo, los valores ahora van de mayor a menor
    # Los floretes con los primeros thetas deben de corresponder a los radios m√°s amplios
    
    current_radii.reverse()

    for n in range (i+1): 
        
        # Para cada florete n, calcula r y theta, coordenadas x e y
        # a√±ade las coordenadas a listas respectivas

        
        
        
        
        
        
        
    # Hemos salido del loop interno
    # Estamos de vuelta en el loop externo
    

    
    # Usa el c√≥digo previo para graficar el girasol
    
    
    
    # Con estas l√≠neas creamos una animaci√≥n
    time.sleep(0.001) 
    clear_output(wait=True)
    display(fig)
    fig.clear()

# Closes the figure animation once complete
# plt.close()

