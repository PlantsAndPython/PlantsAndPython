#!/usr/bin/env python
# coding: utf-8

# # Lesson 4.4

# ## How to mask data (a Boolean statement to fish out data that you want, square brackets after a dataframe)
# _____

# ***Watch this video from 8:06 to 12:06***

# In[1]:


# To load the video, execute this cell by pressing shift + enter

from IPython.display import YouTubeVideo
from datetime import timedelta
start=int(timedelta(hours=0, minutes=8, seconds=6).total_seconds())
end=int(timedelta(hours=0, minutes=12, seconds=6).total_seconds())

YouTubeVideo("jEQRU55x0e4",start=start,end=end,width=640,height=360)


# ***The following is a transcript of the video.***

# > ğŸ’¡ ***Remember:*** Import `pandas` and read in the dataset below to complete this lesson.

# In[2]:


# Import pandas

import pandas as pd


# In[3]:


# Download the dataset from the
# Jupyter Book to read in locally or 
# read in from GitHub, below:

data = pd.read_csv('https://raw.githubusercontent.com/DanChitwood/PlantsAndPython/master/co2_mlo_weekly.csv')


# Next we're going to talk about somethingÂ called masking. Masking is very importantÂ and it's a way to find specific data thatÂ fulfills a criteria that is a Boolean statement; remember, a Boolean statement is somethingÂ that can only evaluate to `True` or `False`,Â to find all the data in your data frame thatÂ is true with respect to the Boolean statement.Â Â 
# 
# So this is what masking does: it gives usÂ specific data and as I said it's very simple,Â a mask is just a Boolean statement.
# 
# We can create a mask variable and set it equal toÂ a Boolean statement. ForÂ the data in the month column, let's make a Boolean statement saying that month equals August.Â We use a double equals here because remember,Â when we're using Python you can have lessÂ than or equal to, greater than or equal to, but equals equalsÂ is truly equal. So the Boolean statement is, is it theÂ month `august`, `True` or `False`? That is the mask. And we're setting this Boolean statementÂ equal to the mask.
# 
# So we hit shift + enterÂ and then we can see what the mask is. 

# In[4]:


# How do we get specific data?
# What if we want all data points from just the month of August?
# We create a mask!
# A mask is a Boolean statement where the data you want is TRUE

mask = data['month']=='aug'


# And we can see what the mask is: it returns the rows of theÂ dataframe that fulfill the criteria of the Boolean statement. This isÂ a large dataframe. It starts at the beginningÂ then it breaks and then it goes all the way to theÂ end. If you remember, the month of `august` was theÂ very first data values. So you can see that theseÂ `august` dates, which were at the top of theÂ Â dataframe, are evaluating as `True`. But then theyÂ evaluate as `False` when the month is not `august` at the end.Â Â 

# In[5]:


# The mask returns which rows evaluate as TRUE for the Boolean statement

mask


# We can get the full data back as well. ThisÂ is what a mask does: it is returningÂ the rows which are `True` and `False`, but ifÂ you put the mask within the dataframe bracketsÂ what you get back is the whole dataframe, thoseÂ rows of the dataframe that evaluate as `True`.Â Â 
# 
# For example, here you can see what weÂ get returned is only data that is the monthÂ Â 
# of `august`. These were the only rows thatÂ fulfilled the Boolean statement of being `True`Â that they were `august`.
# 
# So that's all the maskÂ is: remember a mask is just a Boolean statementÂ and we put the mask in the brackets of theÂ dataframe to return those rows that evaluate asÂ `True` for the Boolean statement.

# In[6]:


# If we place the mask inside the dataframe brackets
# then the rows where the statement is True are returned

data[mask]


# You canÂ use this technique also with a specificÂ column. For example, if you say you're onlyÂ interested in the CO2 parts per million values,Â Â you refer to that column and the square bracketsÂ to get it, but you have a second set of bracketsÂ with the mask and when you do this you will haveÂ only returned the CO2 parts per million values,Â none of the rest of the dataframe, becauseÂ you specified this specific column.Â Â 

# In[7]:


# We can limit what is returned by refering to a specific column
# and placing the mask in a double bracket

data['CO2ppm'][mask]


# You saw that we created a mask, and weÂ called it mask, and we were writing out the maskÂ into our code. But usually people don't do that.Â They do it much more simple, where they justÂ write out the mask.
# 
# YouÂ just put the mask, all in one line of code, withÂ the data or the specific column that you want.Â This is a little complicated to look at but alwaysÂ remember go to the mask first and it will be inÂ the second set of brackets or it will be in theÂ first set of brackets if you are returning all the data and it's just a BooleanÂ statement. And it will return those rows that areÂ true for the Boolean statement. And this is a wayÂ that you get specific data that you want. 

# In[8]:


# Usually, the mask is written out straight into the line of code
# Always look to the second set of brackets to see
# what the mask is

data['CO2ppm'][data['month']=='aug']

