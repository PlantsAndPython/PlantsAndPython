#!/usr/bin/env python
# coding: utf-8

# # Lesson 4.6

# ## Plotting with `seaborn` (specialized plotting for statistics)
# ____

# ***Watch this video from 16:25 to 2:35***

# In[1]:


# To load the video, execute this cell by pressing shift + enter

from IPython.display import YouTubeVideo
from datetime import timedelta
start=int(timedelta(hours=0, minutes=16, seconds=25).total_seconds())
end=int(timedelta(hours=0, minutes=2, seconds=35).total_seconds())

YouTubeVideo("jEQRU55x0e4",start=start,end=end,width=640,height=360)


# ***The following is a transcript of the video.***

# > ğŸ’¡ ***Remember:*** Import `pandas` and read in the dataset below to complete this lesson.

# In[2]:


# Import pandas

import pandas as pd


# In[3]:


# Download the dataset from the
# Jupyter Book to read in locally or 
# read in from GitHub, below:

data = pd.read_csv('https://raw.githubusercontent.com/DanChitwood/PlantsAndPython/master/co2_mlo_weekly.csv')


# NextÂ let's look at seaborn, which is an alternativeÂ way than matplotlib to look at your data.Â And as you'll see seaborn is much more specializedÂ for plotting statistical data than matplotlib is.Â Â 
# 
# So you've already seen how to use matplotlib before. ButÂ for seaborn it works much better with pandas. AsÂ you'll see it works much better with dataframesÂ and it can do very sophisticated statisticalÂ functions and it's also a little more aestheticÂ in producing good looking figures quickly thanÂ matplotlib is. So we import seaborn as sns.Â Also seaborn has this thing calledÂ styles and you can use that using sns.setÂ and you can look up the different styles. It's an easy way just to change the background, the grid lines, and axis ticks in your plots for different uses.Â So we hit shift + enter to import seaborn

# In[4]:


# We've seen how matplotlib can be used to plot and visualize data

import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

# But there is another package called seaborn as well
# seaborn is better than matplotlib with respect to
# playing nice with pandas and dataframes
# and for specific statistical functions

import seaborn as sns
sns.set() # sets different styles, for figures/presentation/poster


# It is helpful to look through the seaborn gallery.
# Find the plot, function, or style that you need and look through the example.
# 
# Gallery: [https://seaborn.pydata.org/examples/index.html](https://seaborn.pydata.org/examples/index.html)
#     
# Explore seaborn styles here: [http://seaborn.pydata.org/tutorial/aesthetics.html](http://seaborn.pydata.org/tutorial/aesthetics.html)

# Oe of the most commonÂ seaborn plot functions is called `lmplot()`. WeÂ call it by `sns.lmplot()` and this is how easy seabornÂ is to use. Just by referring to your dataframe,Â saying data equals what your dataframe is (inÂ our case it's `data`) as soon as you tell seabornÂ what the dataframe is you can refer to your dataÂ by column name.
# 
# So let's say we want a linearÂ model plot using lmplot, where the x-axis is theÂ column running date and the y-axis is CO2 partsÂ per million and we say that our dataframe is dataÂ and really quickly seaborn will come up with thisÂ beautiful plot. You can see the data here. YouÂ see this cyclical cycle of CO2 parts per million. This happens every year, it has to doÂ with the seasonal variation of the earth,Â and this is literally because the the plants areÂ dying in the winter in the northern hemisphereÂ and vice versa in the southern hemisphereÂ and the amount of carbon dioxide thatÂ they're taking in and releasing and decayÂ and other things that contribute to CO2Â create these these really striking cycles.Â This data, if you remember, is from 2017,Â 2018, and 2019 and even though it's cyclingÂ up and down the overall trend is to go up. SoÂ the linear plot function refers to linear modelingÂ and so it will plot your data as a scatter plot asÂ you can see with these points. These are the CO2Â values as we specified for our y-axis, butÂ it will automatically try to to fit a line to yourÂ data. A line is not appropriate for the cyclicalÂ nature of this data as you can see. You would haveÂ to use something like a sine function for that butÂ you can see because the CO2 level is increasingÂ 
# overall that the linear function is appropriateÂ for looking at that overall increase.

# In[5]:


# lm refers to "linear model"
# The sns.lmplot function will fit a line to your data

sns.lmplot(x='running_date', y='CO2ppm', data=data)


# Let's sayÂ though that we just want the scatter plot, weÂ don't want a line in it. So you can just run theÂ same line of code with `lmplot()` but this fit_regÂ argument is asking "should seaborn try to fit a linearÂ model?" and you can say `False`. So if you say `False`Â then you just get the scatter plot of CO2 partsÂ per million back.

# In[6]:


# But maybe you don't want the line
# Set fit_reg to False and you get just the scatterplot!

sns.lmplot(x='running_date', y='CO2ppm', data=data, fit_reg=False)


# Another really great functionÂ in seaborn is `distplot`, this is like a density orÂ a histogram plot and you just say which column youÂ Â want to create the density histogram plot ofÂ and we want to look at CO2 parts per millionÂ and you'll get a beautiful histogram, butÂ importantly you're getting this densityÂ estimate of the distribution of the dataÂ as well.

# In[7]:


# Use sns.distplot() to plot a density plot/histogram

sns.distplot(data['CO2ppm'])


# Let's say that we want to be moreÂ specific. We want to look at the differentÂ densities of the years 2017, 2018, and 2019.Â So remember we already converted year into aÂ categorical variable, but we can create masks.Â So we're going to say we want the CO2 data, so we refer to the CO2 column as a string in theÂ brackets and then we put a second set of bracketsÂ with our mask. We say we want all the dataÂ for CO2 for the year 2017. So we say where year,Â where it's `True` that year is equal to 2017,Â and we create an object to store that dataÂ and we call it `year2017`. We do the same forÂ the year 2018 and we do the same for the yearÂ 2019. So now we have our years separated out.Â Â 

# In[8]:


# What if we want to separate our data out by categories?
# For example, by year?

# We make masks!

year2017 = data['CO2ppm'][data['year']==2017]
year2018 = data['CO2ppm'][data['year']==2018]
year2019 = data['CO2ppm'][data['year']==2019]


# It's just like matplotlib: youÂ can just keep on calling the plotting functionsÂ one after the other and they will just pasteÂ the data on top of the plot that you're making.Â So we want a density plot of the year 2017Â CO2 values, a density plot of the year 2018,Â and the density plot of the year 2019, and youÂ can see whereas we had them all combined beforeÂ now it's creating these different density plotsÂ and we can see there there's clear differencesÂ in the CO2 levels between years and that theyÂ are increasing.

# In[9]:


# Just like matplotlib, you can keep calling a funciton 
# to keep plotting data categories onto the same plot

sns.distplot(year2017, label='2017')
sns.distplot(year2018, label='2018')
sns.distplot(year2019, label='2019')


# **So what did we learn?**

# **Python learning objectives**
# 
# * How to read in a dataframe using `pandas`
# * How to quickly assess dataframe properties, using `head` and `tail`
# * How to select columns of a dataframe
# * How to perform descriptive statistics using `pandas` (`.min`, `.max`, `.std`, `.value_counts`)
# * How to mask data (a Boolean statement to fish out data that you want, square brackets after a dataframe)
# * How to use `iloc` to isolate data within a dataframe (rows first, columns second, start:end, and square brackets)
# * Plotting with `seaborn` (specialized plotting )

# **Plant learning objectives**
# 
# * CO2 levels are increasing, which increases global temperatures
# * Plants respond to increases in CO2 and temperature
# * In the next activity, we'll examine the effects of global warming on crop plants
# * Statistics and data visualization are powerful techniques to explore global trends

# # Thank you!
