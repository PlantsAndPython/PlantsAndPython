#!/usr/bin/env python
# coding: utf-8

# # 1.7 Rebanar
# # Rebanar y tipos de datos
# ____

# Acabas de aprender sobre listas e indexaci√≥n. Pero la mayor√≠a de los ejemplos eran con cadenas y nombres. ¬øQu√© pasa con los n√∫meros?
# 
# En el siguiente video estar√°s usando listas con n√∫meros. Tambi√©n aprender√°s sobre slicing (rebanar o rebanado, en espa√±ol), que lleva la indexaci√≥n al siguiente nivel a√±adiendo un valor adicional `step` que puede devolver valores de cada en√©simo t√©rmino de una lista.
# 
# Los objetivos de aprendizaje para este v√≠deo son los siguientes:

# ### üêç Objetivos de aprendizaje de Python
# 
# - Usar n√∫meros con listas (*1:04*)
# - El rebanado puede acceder a elementos de la lista con un inicio, un final y un paso
# - El inicio de una 'rebanada' es inclusivo, el final no lo es
# - Diferentes tipos de datos en Python: cadenas (strings), enteros(integers), flotantes(floats) (*3:11*)
# - C√≥mo comprobar qu√© tipo de datos est√° utilizando con type()
# - Puedes convertir diferentes tipos entre s√≠ usando str(), int(), float()
# 
# ### üåª Objetivos de aprendizaje en biolog√≠a vegetal
# - El √°ngulo de oro es un n√∫mero irracional, derivado de la secuencia de Fibonacci, que subyace a la disposici√≥n en espiral de las hojas y otros √≥rganos (filotaxia) en las plantas (*3:16*)

# ## Usar n√∫meros con listas y cortar
# ________

# **Mira este video de 0:00 a 3:09**
# 
# Para espa√±ol, haga click en configuraci√≥n, seleccione "espa√±ol" debajo de los subt√≠tulos.
# 
# Traducci√≥n por Marilyn V√°squez-Cruz (Langebio-Cinvestav, Irapuato, M√©xico)

# In[1]:


# Para reproducir el siguiente tutorial, presiona shift + enter

from IPython.display import YouTubeVideo
from datetime import timedelta
start=int(timedelta(hours=0, minutes=0, seconds=0).total_seconds())
end=int(timedelta(hours=0, minutes=3, seconds=9).total_seconds())

YouTubeVideo("CIlwbP_QM1w",start=start,end=end,width=640,height=360)


# ***La siguiente es una transcripci√≥n del video.***

# Recuerda que las listas pueden incluir cualquier tipo de datos, incluso otras listas. Inicializamos una nueva lista con corchetes vac√≠os y luego ponemos n√∫meros en ella. As√≠ que hagamos una lista muy f√°cil y usemos n√∫meros de √≠ndice reales con ella. Entonces, crearemos una lista llamada "n√∫meros", entre par√©ntesis, y comenzar√° en 0, el primer √≠ndice, y pasar√° a 20. Presionamos shift + enter para crear la lista.

# In[2]:


# Recuerde, las listas pueden incluir cualquier tipo de datos,
# ¬°incluso otras listas!
# Podemos inicializar una nueva lista con corchetes vac√≠os []
# y luego poner n√∫meros

# Hag√°moslo f√°cil y hagamos una lista
# con n√∫meros de √≠ndice reales

numbers = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]


# Anteriormente, aprendiste sobre indexaci√≥n y uso de valores iniciales y finales. Con el corte hay un valor de paso adicional. El corte utiliza dos ":" y tres valores con los corchetes y tiene la forma de inicio, fin y paso. Entonces, usando nuestra lista de n√∫meros, intentemos con un comienzo de 2 y final de 16 en un paso de 2 y veamos lo que obtenemos. Puedes ver que el inicio es inclusivo, comienza en 2 pero al final de 16 no es inclusivo, sube pero no incluye 16. Por lo que incluye 14. Y, puedes ver que tambi√©n hay un paso de 2. Es cualquier otro n√∫mero.

# In[3]:


# La indexaci√≥n es m√°s que [inicio: fin]
# Con el corte, hay un valor de "paso"
# El corte usa dos dos puntos y tres valores
# con la forma de [inicio: final: paso]

# Probemos start = 2, end = 16 y step = 2

numbers[2:16:2]


# Hagamos lo mismo pero con un paso de 3, y veamos qu√© obtenemos. As√≠ que comenzamos en 2, no subimos a 16, solo a 14, y puedes ver que estamos usando pasos de tres.

# In[4]:


# Let's try the same again but with step = 3

numbers[2:16:3]


# Puedes hacer abreviaturas. Puedes dejar el n√∫mero de inicio y la indexaci√≥n siempre comenzar√° en cero. Si omites, la indexaci√≥n del n√∫mero final continuar√° hasta el final. Incluir√° el √∫ltimo n√∫mero y si omites los pasos, se utilizar√°n incrementos de 1. Como puedes ver aqu√≠, omitimos el inicio, y a√∫n comenzamos en 0 . Aqu√≠, omitimos el n√∫mero final y llegamos hasta el 20. Y aqu√≠ omitimos el paso y estamos usando incrementos de uno.

# In[5]:


# Si omite el n√∫mero de inicio, la indexaci√≥n comienza en 0

print(numbers[:16:3])

# Si omite el n√∫mero final, la indexaci√≥n contin√∫a hasta el final

print(numbers[2::3])

# Si omite el n√∫mero de paso, se utilizan incrementos de 1

print(numbers[2:16])

