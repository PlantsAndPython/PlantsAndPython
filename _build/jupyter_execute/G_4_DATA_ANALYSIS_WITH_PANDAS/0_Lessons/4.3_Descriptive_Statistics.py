#!/usr/bin/env python
# coding: utf-8

# # Lesson 4.3

# ## How to perform descriptive statistics using `pandas` (`.min`, `.max`, `.std`, `.value_count`)
# ____

# ***Watch this video from 6:01 to 8:06***

# In[1]:


# To load the video, execute this cell by pressing shift + enter

from IPython.display import YouTubeVideo
from datetime import timedelta
start=int(timedelta(hours=0, minutes=6, seconds=1).total_seconds())
end=int(timedelta(hours=0, minutes=8, seconds=6).total_seconds())

YouTubeVideo("jEQRU55x0e4",start=start,end=end,width=640,height=360)


# > ðŸ’¡ ***Remember:*** Import `pandas` and read in the dataset below to complete this lesson.

# In[2]:


# Import pandas

import pandas as pd


# In[3]:


# Download the dataset from the
# Jupyter Book to read in locally or 
# read in from GitHub, below:

data = pd.read_csv('https://raw.githubusercontent.com/DanChitwood/PlantsAndPython/master/co2_mlo_weekly.csv')


# ***The following is a transcript of the video.***

# Next, let's look at how to perform someÂ descriptive statistics in pandas, things likeÂ finding minimums, maximums, standard deviations,Â how many there are of each factor level.
# 
# This is incredibly simple. You just saw that weÂ can refer to a specific column using a string.Â Let's say we want CO2 parts per million, but weÂ want the minimum value of CO2 parts per millionÂ for that column. So we refer to the specificÂ column and all we do is we add dot minÂ as a function. And we get back that the minimum isÂ 402.76.

# In[4]:


# There are a series of functions to perform simple statistics on columns

# .min()

data['CO2ppm'].min()


# If we want the max, we do the same thing:Â dot max, we get 415.39.

# In[5]:


# .max()

data['CO2ppm'].max()


# If we want the mean,Â we just take dot mean we get 408, somewhere inÂ between them.

# In[6]:


# .mean()

data['CO2ppm'].mean()


# And if we want the median, we useÂ the dot median function and we also get somethingÂ somewhere in between the minimum and the maximum.Â 

# In[7]:


# .median()

data['CO2ppm'].median()


# There's a lot of these functions and you canÂ quickly look these up. They're very useful. YouÂ can use unique to give you the levels of a column,Â what types of different things are in thatÂ column. So for example, if we look at theÂ specific column of month, the different levelsÂ 
# of that column are the months of the year.Â Â 

# In[8]:


# .unique() gives the levels of a column, the different values

data['month'].unique()


# You can also get how many things there are of eachÂ one. This is called value counts. Again for month,Â maybe we want to get the value counts and you canÂ see for each month it's going to give us how muchÂ data points there are for each month.

# In[9]:


# .value_counts() returns how many data points there are for each level

data['month'].value_counts()


# There'sÂ a lot of really useful functions. Some of themÂ even do plotting. For example, `.hist()`, will give you a histogram (a plot showing the count of samples over a range of values).

# In[10]:


# .hist() will return a histogram

data['CO2ppm'].hist(bins=10) # have to shift-enter twice


# So that wasÂ how by very simply referring to the names ofÂ columns and then using functions and pandasÂ you can get very basic statistical parametersÂ back.
