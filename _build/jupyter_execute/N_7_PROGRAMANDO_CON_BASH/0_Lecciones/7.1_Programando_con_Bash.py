#!/usr/bin/env python
# coding: utf-8

# 
# # <p style="color:#2C6A7F">7.1 Programando con Bash
# 
# 
# ***Autora:  Dra. Alejandra Rougon*** 
# 
# <p style="color:#9D994B"><a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png" /></a><br />Este trabajo est√° bajo la licencia <a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/">Creative Commons Atribuci√≥n-No Comercial 4.0 Licencia Internacional</a>.
# 
#  
# > ### <p style="color:#2C6A7F"> üîç **Objetivos de aprendizaje**
# >Despu√©s de completar esta lecci√≥n aprender√°s: 
# >
# >* ¬øQu√© es un script de bash?  
# >* Lo b√°sico de la programaci√≥n en bash
# >* ¬øC√≥mo usar variables en bash?
# >* ¬øC√≥mo hacer un for loop en bash?
# 
# Es posible que algunas veces quieras correr el mismo comando  muchas veces o una serie de comandos en muchos archivos. O tal vez quieras buscar no s√≥lo una cadena si no una lista de cadenas, o iterar sobre algo alg√∫n n√∫mero de veces. En estos casos, puedes escribir **scripts** en bash, as√≠ como lo har√≠as en otros lenguajes de programaci√≥n (e.g. python, perl). Un script es un programa que puede ser ejecutado por un interprete. En este caso el interprete ser√≠a bash. El script no tiene que ser compilado como los programas escritos en otros lenguajes como C o C++.
# El script m√°s simple ser√≠a imprimir a la pantalla `Hello world!`. Vamos a crear un directorio llamado `Activity` en el directorio `Documents` y despu√©s crearemos un archivo que contendr√° nuestro script y lo ejecutaremos con `sh`. 
# 
# ```
# $ cat > helloworld.sh
# echo Hello world!
# 
# $ sh helloworld.sh
# Hello world!
# ```
# 
# 
# ### <p style="color:#2C6A7F"> Buenas pr√°cticas
# 
# Es una buena pr√°ctica agregar la extensi√≥n `.sh` a los scripts de bash. Tambi√©n es buena pr√°ctica agregar
# `#!` en la primera l√≠nea, seguido de la ruta del ejecutable de bash. De esa manera tambi√©n podr√°s correr el script volvi√©ndolo ejecutable y sin el comando `sh`. Finalmente tambi√©n es recomendable agregar comentarios que expliquen tu c√≥digo. Tambi√©n puedes agregar l√≠neas vac√≠as d√≥nde necesites para que se vea limpio y organizado. As√≠ es que tu primer archivo podr√≠a ser mejorado as√≠.  
# 
# ```bash
# 
# #!/bin/bash
# 
# # This is my first script and will 
# # print Hello world! to the screen
# 
# echo Hello world!
# 
# ```
# 
# Ahora puedes ejecutarlo con `sh`
# 
# ```sh helloworld.sh```<br>
# 
# o con <br>
# 
# ```chmod +x helloworld.sh```<br>
# ```./myfirstscript.sh```<br>
# 
# Si quieres ejecutar una serie de comandos secuencialmente solamente agrega el siguiente comando a a la siguiente l√≠nea. 
# 
# 

# ```bash
# #!/bin/bash
# 
# # This is my first script and 
# # will print Hello world! to the screen
# 
# echo Hello world!
# echo This is my first file
# echo It is stored in the following path
# pwd
# 
# ```
# 
# ```
# $ sh helloworld.sh 
# Hello world!
# this is my first file
# it is stored in the following path
# /root/sandbox/Documents/Activity
# ```

# 
# ### <p style="color:#2C6A7F"> Variables
# 
# Una **variable** en la programaci√≥n con el shell de bash, como en otros lenguajes,  es una ubicaci√≥n en la memoria que es utilizada para contener un n√∫mero, un car√°cter, una cadena, etc.. Los tipos de datos m√°s utilizados para variables ser√≠an, entero [*integer*] (46), cadena [*string*] (apple), decimal o de punto flotante [*float*] (0.24), y un booleano [*boolean*] (FALSE). El tipo de dato de una variable tiene que estar definido cuando la variable se declara en lenguajes de programaci√≥n de tipado fuerte. Sin embargo, Bash es un tipo de programaci√≥n de tipado d√©bil y no hay necesidad de definir la variable. 
# Variables are declared with the `=` sign, and are called with the `$` sign.
# 
# ```
# $ a=apple
# $ echo $a
# apple
# 
# ```
# Es recomendable usar comillas. En bash, las comillas sencillas y las dobles tienen diferente significado. 
# Las comillas dobles tambi√©n son llamadas "comillas d√©biles". Si almacenas una variable la puedes llamar con las comillas dobles y te dar√° el contenido guardado en la variable.  
# 
# ```
# $ a=apple
# $ b="Value of a is $a"
# $ echo $b
# Value of a is apple
# ```
# 
# Las comillas sencillas o 'comillas fuertes' te dar√°n una interpretaci√≥n literal de lo que encierran. 
# ```
# $ a=apple
# $ b='Value of a is $a'
# $ echo $b
# Value of a is $a
# ```
# cuando no est√°s llamando a una variable o no est√°s usando expresiones regulares no hace ninguna diferencia usar sencillas o dobles. 
# 
# ```
# a='apple'
# ```
# o
# 
# ```
# a="apple"
# ```
# 
# Vamos a crear un script llamado `variable.sh` 
# 
# ```bash
# #!/bin/bash
# 
# #This script prints Hello world! 
# #to the screen and uses a variable.
# 
# Greet='Hello world!'
# echo "$Greet"
# ```
# ```
# $ sh variable.sh
# Hello world!
# ```
# 
# ### <p style="color:#2C6A7F"> Bucles
# Para iterar sobre comandos podemos utilizar bucles [*loops*]. El bucle **for** es representado en los siguientes ejemplos: 
# 
# ```bash
# for variable in 1 2 3 4 5 .. N
# do
# 	command1
# 	command2
# 	commandN
# done
# ```
# 
# ```bash
# for variable in file1 file2 file3
# do
# 	command1 on $variable
# 	command2
# 	commandN
# done
# ```
# Ahora vamos a crear un script con saludos con un bucle *for*. Ahora en lugar de imprimir `Hello world!` vamos a imprimir un saludo para cada continente. 
# 
# ```bash
# #!/bin/bash
# 
# #This script prints a greeting for each continent. 
# 
# continents="Africa Americas Antartica Asia Australia Europe"
# 
# for item in $continents
# do
#   echo "Hello $item" 
# done
# 
# ```
# 
# 
# La variable <font color="#2C6E3B"> continents </font> contiene 6 objetos `Africa` `Americas` `Antartica` `Asia` `Australia` `Europe`. En el bucle *for* la variable  <font color="#9E3147"> item </font> recorrer√° cada uno de esos objetos de la variable <font color="#2C6E3B"> continents </font>, llamada con <font color="#2C6E3B"> $continents </font>.
# 
# Cada uno de ellos ser√° impreso en cada uno de los ciclos del bucle con `echo` mientras son llamados con  <font color="#9E3147">$item </font> en cada iteraci√≥n.
# 
# 
# 
# ```
# $ sh hellocontinents.sh 
# Hello Africa
# Hello Americas
# Hello Antartica
# Hello Asia
# Hello Australia
# Hello Europe
# ```
# 
# Si queremos guardar la salida de nuestro script en un s√≥lo archivo podemos dirigir la salida con  `>>`
# 
# 
# 
# ```bash
# #!/bin/bash
# 
# #This script prints a greeting for each continent 
# #and saves the output to the file Greetings.txt 
# 
# continents="Africa Americas Antartica Asia Australia Europe"
# 
# for item in $continents
# do
#   echo "Hello $item" >> Greetings.txt
# done
# ```
# 
# Si queremos guardar la salida en diferentes archivos podr√≠amos hacerlo as√≠ 
# 
# ```bash
# #!/bin/bash
# 
# #This script prints a greeting for each continent 
# #and saves the output into a different file for each continent.
# 
# continents="Africa Americas Antartica Asia Australia Europe"
# 
# for item in $continents
# do
#   echo "Hello $item" > Greet.$item
# done
# 
# ```
# 
# 
# ___
# üîë **En esta lecci√≥n has aprendido**
# 
# * ¬øQu√© es un script de bash?  
# * Lo b√°sico de la programaci√≥n en bash
# * ¬øC√≥mo usar variables en bash?
# * ¬øC√≥mo hacer un bucle *for* en bash?
# 
